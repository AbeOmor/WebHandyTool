<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_web___crawler___p_o_c_8py">
    <title>Web_Crawler_POC.py File Reference</title>
<para>Include dependency diagram for Web_Crawler_POC.py</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_web___crawler___p_o_c_8py__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Included by dependency diagram for Web_Crawler_POC.py</para>
<para>
    <figure>
        <title>Dependency diagram</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="_web___crawler___p_o_c_8py__dep__incl.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title> Classes </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c">pylinkvalidator::POC Code::Web_Crawler_POC::Web_Crawler_POC</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title> Namespaces </title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct <link linkend="namespacepylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c">pylinkvalidator::POC Code::Web_Crawler_POC</link></para>
                    </listitem>
                </itemizedlist>
            </para>
        </simplesect>
    <simplesect>
        <title>Detailed Description</title>
    <para>Definition in file /Users/Abe/Documents/pylinkvalidator/POC Code/Web_Crawler_POC.py</para>
    </simplesect>
    <literallayout><computeroutput>
<link linkend="namespacepylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1a22c868491c11af4cb64226ff9b053b32">1 </link>__author__&#32;=&#32;<emphasis class="stringliteral">&apos;Abe&apos;</emphasis>
2 
3 <emphasis class="keyword">from</emphasis>&#32;bs4&#32;<emphasis class="keyword">import</emphasis>&#32;BeautifulSoup
4 <emphasis class="keyword">from</emphasis>&#32;pprint&#32;<emphasis class="keyword">import</emphasis>&#32;pprint
5 <emphasis class="keyword">import</emphasis>&#32;requests
6 <emphasis class="keyword">import</emphasis>&#32;urlparse
7 <emphasis class="keyword">from</emphasis>&#32;urllib2&#32;<emphasis class="keyword">import</emphasis>&#32;urlopen
8 <emphasis class="keyword">from</emphasis>&#32;urllib&#32;<emphasis class="keyword">import</emphasis>&#32;urlretrieve
9 <emphasis class="keyword">import</emphasis>&#32;os
10 <emphasis class="keyword">import</emphasis>&#32;sys
11 
<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c">12 </link><emphasis class="keyword">class&#32;</emphasis><link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c">Web_Crawler_POC</link>(object):
<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1ada86ffcae767ad805e427f2a5ad9077b">13 </link>&#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis><link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1ada86ffcae767ad805e427f2a5ad9077b">__init__</link>(self):
<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">14 </link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">start</link>&#32;=&#32;<emphasis class="stringliteral">&apos;www.example.com&apos;</emphasis>
15 
16 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;&quot;&quot;</emphasis>
17 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;Used&#32;to&#32;get&#32;all&#32;the&#32;links&#32;on&#32;a&#32;page</emphasis>
18 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a11987d114e903e22f320ac3bb9929b4d">19 </link>&#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis><link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a11987d114e903e22f320ac3bb9929b4d">grabLinks</link>(self):
20 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">start</link>&#32;=&#32;raw_input(<emphasis class="stringliteral">&quot;What&#32;website&#32;do&#32;you&#32;what&#32;to&#32;crawl&#32;(Input&#32;format&#32;=&#32;www.example.com):&quot;</emphasis>)
21 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;&#32;=&#32;requests.get(<emphasis class="stringliteral">&quot;HTTP://&quot;</emphasis>&#32;+&#32;self.<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">start</link>)
22 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;data&#32;=&#32;r.text
23 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;soup&#32;=&#32;BeautifulSoup(data,<emphasis class="stringliteral">&quot;html.parser&quot;</emphasis>)
24 
25 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;link&#32;<emphasis class="keywordflow">in</emphasis>&#32;soup.find_all(<emphasis class="stringliteral">&apos;a&apos;</emphasis>):
26 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">print</emphasis>&#32;<emphasis class="stringliteral">&quot;Found&#32;this&#32;link&#32;on&#32;the&#32;page&#32;:&quot;</emphasis>&#32;+&#32;link.get(<emphasis class="stringliteral">&apos;href&apos;</emphasis>)
27 
28 &#32;&#32;&#32;&#32;<emphasis class="stringliteral">&quot;&quot;&quot;</emphasis>
29 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;Used&#32;to&#32;download&#32;the&#32;HTML&#32;and&#32;all&#32;the&#32;images</emphasis>
30 <emphasis class="stringliteral">&#32;&#32;&#32;&#32;&quot;&quot;&quot;</emphasis>
<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a0b963442829a18b9cf3ea81b8a97be0b">31 </link>&#32;&#32;&#32;&#32;<emphasis class="keyword">def&#32;</emphasis><link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a0b963442829a18b9cf3ea81b8a97be0b">downloadHTML</link>(self):
32 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;self.<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">start</link>&#32;=&#32;raw_input(<emphasis class="stringliteral">&quot;What&#32;website&#32;do&#32;you&#32;what&#32;to&#32;crawl&#32;(Input&#32;format&#32;=&#32;www.example.com):&quot;</emphasis>)
33 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;URL&#32;=&#32;<emphasis class="stringliteral">&quot;HTTP://&quot;</emphasis>&#32;+&#32;self.<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c_1a081769cb20d863382f36364a61c8060b">start</link>
34 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;soup&#32;=&#32;BeautifulSoup(urlopen(URL),<emphasis class="stringliteral">&quot;html.parser&quot;</emphasis>)
35 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parsed&#32;=&#32;list(urlparse.urlparse(URL))
36 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">for</emphasis>&#32;image&#32;<emphasis class="keywordflow">in</emphasis>&#32;soup.findAll(<emphasis class="stringliteral">&quot;img&quot;</emphasis>):
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="comment">#Print&#32;out&#32;the&#32;string&#32;of&#32;the&#32;image&#32;file&#32;being&#32;processed</emphasis>
38 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">print</emphasis>&#32;<emphasis class="stringliteral">&quot;Image:&#32;%(src)s&quot;</emphasis>&#32;%&#32;image
39 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;filename&#32;=&#32;image[<emphasis class="stringliteral">&quot;src&quot;</emphasis>].split(<emphasis class="stringliteral">&quot;/&quot;</emphasis>)[-1]
40 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outpath&#32;=&#32;os.path.join(<emphasis class="stringliteral">&apos;imgs/&apos;</emphasis>,&#32;filename)
41 
42 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;image[<emphasis class="stringliteral">&quot;src&quot;</emphasis>].lower().startswith(<emphasis class="stringliteral">&quot;http&quot;</emphasis>):
43 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;urlretrieve(image[<emphasis class="stringliteral">&quot;src&quot;</emphasis>],&#32;outpath)
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">else</emphasis>:
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;urlretrieve(urlparse.urlunparse(parsed),&#32;outpath)
46 
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis class="keywordflow">print</emphasis>&#32;<emphasis class="stringliteral">&quot;HTML:&#32;&quot;</emphasis>&#32;+&#32;soup.title.string
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HTMLoutpath&#32;=&#32;os.path.join(<emphasis class="stringliteral">&apos;HTML/&apos;</emphasis>,&#32;str(soup.title.string)&#32;+&#32;<emphasis class="stringliteral">&quot;.html&quot;</emphasis>)
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;urlretrieve(URL,HTMLoutpath)
50 
51 
52 <emphasis class="keywordflow">if</emphasis>&#32;__name__&#32;==&#32;<emphasis class="stringliteral">&apos;__main__&apos;</emphasis>:
<link linkend="namespacepylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1a4666fce36918603f23fdc35bf9439a79">53 </link>&#32;&#32;&#32;&#32;choice&#32;=&#32;raw_input(<emphasis class="stringliteral">&quot;Do&#32;you&#32;want&#32;to&#32;get&#32;all&#32;links&#32;on&#32;site&#32;(Enter&#32;:&#32;l)&#32;or&#32;download&#32;the&#32;site&#32;(Enter:&#32;d)&#32;&quot;</emphasis>)
54 
<link linkend="namespacepylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1a6207ec383f50bd418bb20f680ae55e1a">55 </link>&#32;&#32;&#32;&#32;webcrawl&#32;=&#32;<link linkend="classpylinkvalidator_1_1_p_o_c_01_code_1_1_web___crawler___p_o_c_1_1_web___crawler___p_o_c">Web_Crawler_POC</link>()
56 
57 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;choice.lower()&#32;==&#32;<emphasis class="stringliteral">&apos;l&apos;</emphasis>:
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;webcrawl.grabLinks()
59 
60 &#32;&#32;&#32;&#32;<emphasis class="keywordflow">if</emphasis>&#32;choice.lower()&#32;==&#32;<emphasis class="stringliteral">&apos;d&apos;</emphasis>:
61 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;webcrawl.downloadHTML()
    </computeroutput></literallayout>
</section>
