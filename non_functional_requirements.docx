NON-FUNCTIONAL REQUIREMENTS

Look and Feel Requirements 

Appearance requirements:  The command line interface has to be intuitive for all users of the web crawler.

Style requirements: It would be recommended for users to use our program with a command line interface.

Usability and Humanity Requirements 

Ease of Use Requirements: Interface of the program should be intuitive and easy to understand. People with no training of the command line interface can use the product.

Personalization and international requirements: This program can be used by anybody who has access to a computer and has adequate knowledge of a command line.

Learning requirements:  This program shall be easy to learn by an individual with adequate knowledge of the command line. If the user is using the webcrawler, he/she shall spend no more than a few seconds waiting for the results of the webcrawler depending on the number of links on a website.

Understandability and Politeness Requirement: The program shall hide the details of its construction from the user.

Accessibility requirements: A person using the program needs all fingers needed for typing by the user and eyesight. The product shall conform to the Americans with Disabilities Act.

Performance Requirements 

Speed and Latency Requirements:
Speed of the program depends on the speed of the operating system. The program shall respond to the user’s requests within seconds, dependent on the number of links on the webpage. 

Safety-Critical Requirements: The program should not infringe the user’s privacy. 
This will be verified prior to completion of the program.



Precision or Accuracy Requirements:
The program should specify the type of error accurately. If a link is not working the program should identify that it’s not working with the correct error code.

Reliability and Availability Requirements:

This program should work whenever the user wants to use it - 24 hours a day, 7 days a week.

Robustness or Fault-Tolerance Requirements:
The system should tolerate corrupted HTML data, unexpected server configurations and behaviors and any other strange issues. Our system detects these situations and makes decisions or provides error messages for the system administration function.
If there is an error found while a webpage is being crawled it should prompt a message stating the error next to the link and continue checking for other links.

Capacity Requirements:
Each user who’s using the webcrawler is independent of another. Therefore there’s no limit as to the number of people who can use this program at once.

Scalability or Extensibility Requirements:
Scalability, in terms of the increasing number of users over time, is not a concern.

Longevity Requirements:
This program performs a webcrawl on links. So it is reliable until there’s a major change in the website being crawled.

Operational and Environmental Requirements 
Expected Physical Environment:
This program can be used anywhere using a device with suitable software requirements. 

Requirements for Interfacing with Adjacent Systems:
pylinkvalidator(the webcrawler) does not require external libraries if executed with python 2.x. It requires beautifulsoup4 if executed with python 3.x. It has been tested on python 2.6, python 2.7, and python 3.3.


Production Requirements:

The product shall be distributed as pip. pylinkvalidator(the webcrawler) file can be downloaded from Github. It can be used on any device, which has an operating system that can run a python program. The device also needs to have a suitable interface for user interaction (e.g. command line interface).


Release Requirements: 
A new release of the program shall not intervene with the data of the previous program. A webpage can still be crawled with the older version of the program, given the there exists a newer version.

Maintainability and Support Requirements 
Maintenance Requirements:
 The maintenance of the app has to be done by developers, and end user has no role in this regard.

Supportability Requirements:

This webcrawler program is self-supporting as its interface is very intuitive.

Adaptability Requirements:

The product is expected to run on python under Windows XP and Linux, mac os x. 

Security Requirements 
Access Requirements:
Only the user has access to their own personal information, like the last webpage crawled. The program will not keep track of this information, and developers have no access to it either.

Integrity Requirements:
This is not applicable since this program does not rely on stored data any result produced comes from the webpage which is crawled. 

Privacy Requirements:
The product shall notify customers of changes to its information policy.

Audit Requirements:
Not applicable.

Immunity Requirements:
Not applicable.

Cultural Requirements
Cultural Requirements:
The webcrawler can be used by anyone regardless of his or her cultural background.

Legal Requirements 
Compliance Requirements:

Not applicable.

Standards Requirements:

The webcrawler complies with all software development standards.

Project Issues 

Open Issues 
●	Parts of user interface not known.

●	Testing of user interface not known.

●	Updating user interface.

Off-the-Shelf Solutions 
Ready-Made Products:
Not applicable.

Reusable Components:
Not applicable.

Products That Can Be Copied:
There are other WebCrawlers that are available, which we can use as a foundation for our program. Its specification can cut our analysis effort by a lot.

New Problems 
Effects on the Current Environment:
Not applicable.

Effects on the Installed Systems:
Not applicable.

Potential User Problems:
Not applicable.

Limitations in the Anticipated Implementation Environment That May
Inhibit the New Product

Not applicable.

Follow-Up Problems:
Making changes to the webcrawler as more changes occur 

Tasks 
●	Work on prototype and get feedback from supervisor.

●	Discuss missing requirements and add them.

●	After getting feedback on prototype, work on revisions

Migration to the New Product 
Not applicable.

Risks 
Loss of Personnel: The loss of one member would be bad since we are such a small group. Each group member has been assigned tasks of equal value. We are having weekly meetings to share detailed progress reports as a precautionary measure. 

Learning of the software tools: Some of the software tools are new to the team members, so in order to successfully complete implementation of the program and meet project deadlines it is imperative that the members of the group learn to use these tools in a timely manner.

Costs 
This program is not for profit.

User Documentation and Training 
Completed course in fundamentals of software development which documentation was taught.

Waiting Room
Not applicable 

Ideas for Solutions
Not applicable


